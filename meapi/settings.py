"""
Django settings for meapi project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv
import pymysql

# Ensure PyMySQL acts as MySQLdb (avoids requiring mysqlclient binary build)
pymysql.install_as_MySQLdb()

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-secret-key-change-in-production")
DEBUG = os.getenv("DJANGO_DEBUG", "False") == "True"

# Allow Railway's dynamic domains and custom domains
# Parse ALLOWED_HOSTS env var safely (ignore empty segments / whitespace)
raw_hosts = os.getenv("ALLOWED_HOSTS", "")
ALLOWED_HOSTS = [h.strip() for h in raw_hosts.split(",") if h.strip()]

# Add your specific Railway domain
RAILWAY_HOSTS = [
    "portfolimaker-production.up.railway.app",
    "healthcheck.railway.app",
    "localhost",
    "127.0.0.1"
]

# TEMPORARY: Allow all hosts for Railway debugging, or use specific hosts
if not ALLOWED_HOSTS:
    ALLOWED_HOSTS = ["*"]  # Allow all for debugging
    # ALLOWED_HOSTS = RAILWAY_HOSTS  # Use this for production

# Always ensure Railway domains are included
for host in RAILWAY_HOSTS:
    if host not in ALLOWED_HOSTS and "*" not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(host)

# Always allow Railway healthcheck domain
if "healthcheck.railway.app" not in ALLOWED_HOSTS and "*" not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append("healthcheck.railway.app")

# Behind Railway's proxy ensure Django knows the original scheme
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Simple CSRF configuration
CSRF_TRUSTED_ORIGINS = []



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     # third-party
    "rest_framework",
    "rest_framework_simplejwt",  # Add this for JWT authentication
    "corsheaders",
    # local
    "portfolio",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise for efficient static file serving in production
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'meapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Railway provides these MySQL environment variables when you add a MySQL service:
# MYSQLDATABASE, MYSQLHOST, MYSQLPASSWORD, MYSQLPORT, MYSQLUSER, MYSQL_URL, MYSQL_ROOT_PASSWORD
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.getenv("MYSQLDATABASE", os.getenv("MYSQL_DATABASE", "railway")),
        "USER": os.getenv("MYSQLUSER", "root"), 
        "PASSWORD": os.getenv("MYSQLPASSWORD", os.getenv("MYSQL_ROOT_PASSWORD", "")),
        "HOST": os.getenv("MYSQLHOST", "127.0.0.1"),
        "PORT": int(os.getenv("MYSQLPORT", "3306")),
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            "charset": "utf8mb4",
            "connect_timeout": 60,  # Increased timeout
            "read_timeout": 60,
            "write_timeout": 60,
        },
        "CONN_MAX_AGE": 300,  # 5 minutes connection pooling
        "CONN_HEALTH_CHECKS": True,
        "TEST": {
            "CHARSET": None,
            "COLLATION": None,
        },
    }
}

# Database connection retry settings
DATABASE_CONNECTION_RETRY_DELAY = 5
DATABASE_CONNECTION_MAX_RETRIES = 3


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
}

CORS_ALLOW_ALL_ORIGINS = True  # Temporarily allow all origins for testing

# Frontend URLs - Add these when your frontend is deployed
FRONTEND_URLS = os.getenv("FRONTEND_URLS", "").split(",")
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",     # React development
    "http://127.0.0.1:3000",
    "http://localhost:5173",     # Vite development
    "http://127.0.0.1:5173",
    "https://portfolimaker-production.up.railway.app",  # Your Railway domain
]

# Add production frontend URLs when available
if FRONTEND_URLS and FRONTEND_URLS != [""]:
    CORS_ALLOWED_ORIGINS.extend([url.strip() for url in FRONTEND_URLS if url.strip()])

# Production Security Settings
if not DEBUG:
    # Security Headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # SSL Settings - Temporarily disabled for Railway testing
    # SECURE_SSL_REDIRECT = True  # Disabled for testing
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Additional security
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
    
    # CSRF settings for production
    CSRF_COOKIE_HTTPONLY = True
    CSRF_USE_SESSIONS = False
else:
    # Development CSRF settings - more permissive
    CSRF_COOKIE_SECURE = False
    CSRF_COOKIE_HTTPONLY = False
TIME_ZONE = "Asia/Kolkata"
USE_TZ = True

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARNING' if not DEBUG else 'DEBUG',
            'propagate': False,
        },
    },
}
